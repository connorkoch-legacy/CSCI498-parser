# -*- coding: utf-8 -*-
# snapshottest: v1 - https://goo.gl/zC4yUc
from __future__ import unicode_literals

from snapshottest import GenericRepr, Snapshot


snapshots = Snapshot()

snapshots['test_sampleCFG 1'] = GenericRepr("\nTerminals: i, o, plus, taco, times, x, y, z\nNon-terminals: A, B, C, D, E, F, G, S\n\n(1)\t A -> A times C\nPredict ['x', 'z']\n(2)\t A -> x\nPredict ['x']\n(3)\t B -> C plus B\nPredict ['y', 'z']\n(4)\t B -> y\nPredict ['y']\n(5)\t C -> z D D\nPredict ['z']\n(6)\t D -> E F G\nPredict ['i', 'o', 'taco']\n(7)\t E -> F i\nPredict ['i', 'o', 'taco']\n(8)\t E -> i F\nPredict ['i']\n(9)\t F -> F o\nPredict ['o', 'taco']\n(10)\t F -> lambda\nPredict ['i', 'o', 'taco']\n(11)\t G -> taco\nPredict ['taco']\n(12)\t S -> A\nPredict ['x', 'z']\n(13)\t S -> B\nPredict ['y', 'z']\n(14)\t S -> S $\nPredict ['x', 'y', 'z']\nGrammar Start Symbol or Goal: S\n\nFirst sets:\nA : ['x', 'z']\nB : ['y', 'z']\nC : ['y', 'z']\nD : ['i', 'o', 'taco']\nE : ['i', 'o', 'taco']\nF : ['o', 'taco']\nG : ['taco']\nS : ['x', 'y', 'z']\nFollow sets:\nA : ['$', 'times']\nB : ['$']\nC : ['$', 'plus', 'times']\nD : ['$', 'i', 'o', 'plus', 'taco', 'times']\nE : ['o', 'taco']\nF : ['i', 'o', 'taco']\nG : ['$', 'i', 'o', 'plus', 'taco', 'times']\nS : ['$']\n")

snapshots['test_sampleCFG2 1'] = GenericRepr("\nTerminals: a, b, e, equal, f, g, h, j, k, plus, s, t, times, zero\nNon-terminals: A, E, S, T, VAR\n\n(1)\t A -> T A\nPredict ['a', 'e', 'f', 'g', 'h', 'j', 'k', 's', 'zero']\n(2)\t A -> lambda\nPredict ['$']\n(3)\t E -> VAR\nPredict ['a', 'e', 'f', 'g', 'h', 'j', 'k', 's', 'zero']\n(4)\t E -> a plus b\nPredict ['a']\n(5)\t E -> s times t\nPredict ['s']\n(6)\t E -> zero\nPredict ['zero']\n(7)\t S -> A $\nPredict ['$', 'a', 'e', 'f', 'g', 'h', 'j', 'k', 's', 'zero']\n(8)\t T -> VAR equal E\nPredict ['a', 'e', 'f', 'g', 'h', 'j', 'k', 's', 'zero']\n(9)\t VAR -> e\nPredict ['e']\n(10)\t VAR -> f\nPredict ['f']\n(11)\t VAR -> g\nPredict ['g']\n(12)\t VAR -> h\nPredict ['h']\n(13)\t VAR -> j\nPredict ['j']\n(14)\t VAR -> k\nPredict ['k']\nGrammar Start Symbol or Goal: S\n\nFirst sets:\nA : ['a', 'e', 'f', 'g', 'h', 'j', 'k', 's', 'zero']\nE : ['a', 'e', 'f', 'g', 'h', 'j', 'k', 's', 'zero']\nS : ['$', 'a', 'e', 'f', 'g', 'h', 'j', 'k', 's', 'zero']\nT : ['a', 'e', 'f', 'g', 'h', 'j', 'k', 's', 'zero']\nVAR : ['a', 'e', 'f', 'g', 'h', 'j', 'k', 's', 'zero']\nFollow sets:\nA : ['$']\nE : ['$', 'a', 'e', 'f', 'g', 'h', 'j', 'k', 's', 'zero']\nS : []\nT : ['$', 'a', 'e', 'f', 'g', 'h', 'j', 'k', 's', 'zero']\nVAR : ['$', 'a', 'e', 'equal', 'f', 'g', 'h', 'j', 'k', 's', 'zero']\n")

snapshots['test_sample 1'] = GenericRepr("\nTerminals: a, b, d, g, h\nNon-terminals: A, B, C, D, S\n\n(1)\t A -> B C\nPredict ['$', 'g', 'h']\n(2)\t A -> d a\nPredict ['d']\n(3)\t B -> g\nPredict ['g']\n(4)\t B -> lambda\nPredict ['$', 'a', 'g', 'h']\n(5)\t C -> h\nPredict ['h']\n(6)\t C -> lambda\nPredict ['$', 'b', 'g', 'h']\n(7)\t D -> A C B\nPredict ['$', 'd', 'g', 'h']\n(8)\t D -> B a\nPredict ['a', 'g', 'h']\n(9)\t D -> C b b\nPredict ['b', 'g', 'h']\n(10)\t S -> D $\nPredict ['$', 'a', 'b', 'd', 'g', 'h']\nGrammar Start Symbol or Goal: S\n\nFirst sets:\nA : ['d', 'g', 'h']\nB : ['g', 'h']\nC : ['g', 'h']\nD : ['a', 'b', 'd', 'g', 'h']\nS : ['$', 'a', 'b', 'd', 'g', 'h']\nFollow sets:\nA : ['$', 'g', 'h']\nB : ['$', 'a', 'g', 'h']\nC : ['$', 'b', 'g', 'h']\nD : ['$']\nS : []\n")

snapshots['test_sample2 1'] = GenericRepr("\nTerminals: e, f, z\nNon-terminals: A, B, C, S\n\n(1)\t A -> B A B\nPredict ['e', 'f', 'z']\n(2)\t A -> lambda\nPredict ['e', 'f', 'z']\n(3)\t A -> z z A z z\nPredict ['z']\n(4)\t B -> C A C\nPredict ['e', 'f', 'z']\n(5)\t C -> e A f\nPredict ['e']\n(6)\t C -> lambda\nPredict ['e', 'f', 'z']\n(7)\t S -> z A z $\nPredict ['z']\nGrammar Start Symbol or Goal: S\n\nFirst sets:\nA : ['e', 'z']\nB : ['e', 'z']\nC : ['e', 'z']\nS : ['z']\nFollow sets:\nA : ['e', 'f', 'z']\nB : ['e', 'f', 'z']\nC : ['e', 'f', 'z']\nS : []\n")

snapshots['test_predict_set_example 1'] = GenericRepr("\nTerminals: a, b, c, d, q\nNon-terminals: A, B, C, Q, S\n\n(1)\t A -> B Q\nPredict ['$', 'b', 'c', 'q']\n(2)\t A -> a B C d\nPredict ['a']\n(3)\t B -> b B\nPredict ['b']\n(4)\t B -> lambda\nPredict ['$', 'c', 'd', 'q']\n(5)\t C -> c\nPredict ['c']\n(6)\t C -> lambda\nPredict ['$', 'd']\n(7)\t Q -> lambda\nPredict ['$', 'c']\n(8)\t Q -> q\nPredict ['q']\n(9)\t S -> A C $\nPredict ['$', 'a', 'b', 'c', 'q']\nGrammar Start Symbol or Goal: S\n\nFirst sets:\nA : ['a', 'b', 'c', 'q']\nB : ['b', 'c', 'q']\nC : ['c']\nQ : ['q']\nS : ['$', 'a', 'b', 'c', 'q']\nFollow sets:\nA : ['$', 'c']\nB : ['$', 'c', 'd', 'q']\nC : ['$', 'd']\nQ : ['$', 'c']\nS : []\n")

snapshots['test_from_str 1'] = GenericRepr("\nTerminals: \nNon-terminals: S\n\n(1)\t S -> lambda $\nPredict ['$']\nGrammar Start Symbol or Goal: S\n\nFirst sets:\nS : ['$']\nFollow sets:\nS : []\n")

snapshots['test_regex_grammar 1'] = GenericRepr("\nTerminals: (, ), *, +, -, a, b, c, d, “|”\nNon-terminals: ALTERNATION, BAR, CHAR, GROUPING, LPAREN, MINUS, PLUS, QUANTIFIER, RANGE, RPAREN, SEQUENCE, STAR, TERMINAL, \ufeffREGEX\n\n(1)\t ALTERNATION -> SEQUENCE\nPredict ['(', ')', '*', '+', '-', 'a', 'b', 'c', 'd', '“|”']\n(2)\t ALTERNATION -> SEQUENCE BAR ALTERNATION\nPredict ['(', ')', '*', '+', '-', 'a', 'b', 'c', 'd', '“|”']\n(3)\t BAR -> “|”\nPredict ['“|”']\n(4)\t CHAR -> a\nPredict ['a']\n(5)\t CHAR -> b\nPredict ['b']\n(6)\t CHAR -> c\nPredict ['c']\n(7)\t CHAR -> d\nPredict ['d']\n(8)\t GROUPING -> LPAREN ALTERNATION RPAREN\nPredict ['(', ')', '*', '+', '-', 'a', 'b', 'c', 'd', '“|”']\n(9)\t GROUPING -> TERMINAL\nPredict ['-', 'a', 'b', 'c', 'd']\n(10)\t LPAREN -> (\nPredict ['(']\n(11)\t MINUS -> -\nPredict ['-']\n(12)\t PLUS -> +\nPredict ['+']\n(13)\t QUANTIFIER -> GROUPING\nPredict ['(', ')', '*', '+', '-', 'a', 'b', 'c', 'd', '“|”']\n(14)\t QUANTIFIER -> GROUPING PLUS\nPredict ['(', ')', '*', '+', '-', 'a', 'b', 'c', 'd', '“|”']\n(15)\t QUANTIFIER -> GROUPING STAR\nPredict ['(', ')', '*', '+', '-', 'a', 'b', 'c', 'd', '“|”']\n(16)\t RANGE -> CHAR MINUS CHAR\nPredict ['-', 'a', 'b', 'c', 'd']\n(17)\t RPAREN -> )\nPredict [')']\n(18)\t SEQUENCE -> QUANTIFIER\nPredict ['(', ')', '*', '+', '-', 'a', 'b', 'c', 'd', '“|”']\n(19)\t SEQUENCE -> QUANTIFIER SEQUENCE\nPredict ['(', ')', '*', '+', '-', 'a', 'b', 'c', 'd', '“|”']\n(20)\t STAR -> *\nPredict ['*']\n(21)\t TERMINAL -> CHAR\nPredict ['-', 'a', 'b', 'c', 'd']\n(22)\t TERMINAL -> RANGE\nPredict ['-', 'a', 'b', 'c', 'd']\n(23)\t \ufeffREGEX -> ALTERNATION $\nPredict ['(', ')', '*', '+', '-', 'a', 'b', 'c', 'd', '“|”']\n(24)\t \ufeffREGEX -> lambda $\nPredict ['$']\nGrammar Start Symbol or Goal: \ufeffREGEX\n\nFirst sets:\nALTERNATION : ['(', ')', '*', '+', '-', 'a', 'b', 'c', 'd', '“|”']\nBAR : ['(', ')', '*', '+', '-', 'a', 'b', 'c', 'd', '“|”']\nCHAR : ['-', 'a', 'b', 'c', 'd']\nGROUPING : ['(', ')', '*', '+', '-', 'a', 'b', 'c', 'd', '“|”']\nLPAREN : ['(', ')', '*', '+', '-', 'a', 'b', 'c', 'd', '“|”']\nMINUS : ['-', 'a', 'b', 'c', 'd']\nPLUS : ['+']\nQUANTIFIER : ['(', ')', '*', '+', '-', 'a', 'b', 'c', 'd', '“|”']\nRANGE : ['-', 'a', 'b', 'c', 'd']\nRPAREN : [')']\nSEQUENCE : ['(', ')', '*', '+', '-', 'a', 'b', 'c', 'd', '“|”']\nSTAR : ['*']\nTERMINAL : ['-', 'a', 'b', 'c', 'd']\n\ufeffREGEX : ['$', '(', ')', '*', '+', '-', 'a', 'b', 'c', 'd', '“|”']\nFollow sets:\nALTERNATION : ['$', ')']\nBAR : ['(', ')', '*', '+', '-', 'a', 'b', 'c', 'd', '“|”']\nCHAR : ['$', '(', ')', '*', '+', '-', 'a', 'b', 'c', 'd', '“|”']\nGROUPING : ['$', '(', ')', '*', '+', '-', 'a', 'b', 'c', 'd', '“|”']\nLPAREN : ['(', ')', '*', '+', '-', 'a', 'b', 'c', 'd', '“|”']\nMINUS : ['-', 'a', 'b', 'c', 'd']\nPLUS : ['$', '(', ')', '*', '+', '-', 'a', 'b', 'c', 'd', '“|”']\nQUANTIFIER : ['$', '(', ')', '*', '+', '-', 'a', 'b', 'c', 'd', '“|”']\nRANGE : ['$', '(', ')', '*', '+', '-', 'a', 'b', 'c', 'd', '“|”']\nRPAREN : ['$', '(', ')', '*', '+', '-', 'a', 'b', 'c', 'd', '“|”']\nSEQUENCE : ['$', '(', ')', '*', '+', '-', 'a', 'b', 'c', 'd', '“|”']\nSTAR : ['$', '(', ')', '*', '+', '-', 'a', 'b', 'c', 'd', '“|”']\nTERMINAL : ['$', '(', ')', '*', '+', '-', 'a', 'b', 'c', 'd', '“|”']\n\ufeffREGEX : []\n")
